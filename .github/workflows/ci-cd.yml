name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Compile project
      run: mvn clean compile

    - name: Run tests
      run: mvn test

    - name: Package JAR
      run: mvn package

    - name: Generate Javadoc
      run: mvn javadoc:javadoc

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          target/*.jar
          target/reports/apidocs/

  create-native-binaries:
    needs: build
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            binary-name: moovite-linux
            jlink-options: --strip-debug --no-man-pages --no-header-files
          - os: windows-latest
            binary-name: moovite-windows.exe
            jlink-options: --strip-debug --no-man-pages --no-header-files
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Package JAR
      run: mvn clean package

    - name: Verify JAR exists (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        ls -la target/
        ls -la target/*.jar

    - name: Verify JAR exists (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        Get-ChildItem target
        Get-ChildItem target/*.jar

    - name: Install jpackage dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y fakeroot binutils

    - name: Create native binary (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        # Try jpackage first
        if jpackage \
          --input target \
          --main-jar moovite-1.0-SNAPSHOT.jar \
          --main-class com.nnamo.App \
          --name moovite \
          --app-version 1.0 \
          --type app-image \
          --dest native-binary \
          --java-options '-Djava.awt.headless=false' \
          --runtime-image $JAVA_HOME; then
          echo "✅ jpackage succeeded"
          # Make sure the executable is executable
          if [ -f "native-binary/moovite/bin/moovite" ]; then
            chmod +x native-binary/moovite/bin/moovite
          fi
          if [ -f "native-binary/moovite/moovite" ]; then
            chmod +x native-binary/moovite/moovite
          fi
        else
          echo "jpackage failed, using jlink alternative..."
          
          # Create custom runtime with jlink
          jlink \
            --module-path $JAVA_HOME/jmods \
            --add-modules java.base,java.desktop,java.sql,java.net.http,java.logging,java.xml \
            --output runtime \
            --strip-debug \
            --no-man-pages \
            --no-header-files
          
          # Create app directory structure
          mkdir -p native-binary/moovite/bin
          mkdir -p native-binary/moovite/lib
          
          # Copy runtime
          cp -r runtime/* native-binary/moovite/
          
          # Copy JAR
          cp target/moovite-1.0-SNAPSHOT.jar native-binary/moovite/lib/
          
          # Create launcher script
          cat > native-binary/moovite/bin/moovite << 'EOF'
        #!/bin/bash
        DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
        exec "$DIR/java" -Djava.awt.headless=false -jar "$DIR/../lib/moovite-1.0-SNAPSHOT.jar" "$@"
        EOF
          chmod +x native-binary/moovite/bin/moovite
          echo "✅ jlink alternative completed"
        fi

    - name: Create native binary (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Try jpackage first
        $jpackageSuccess = $false
        try {
            $result = & jpackage --input target --main-jar moovite-1.0-SNAPSHOT.jar --main-class com.nnamo.App --name moovite --app-version 1.0 --type app-image --dest native-binary --java-options "-Djava.awt.headless=false" --runtime-image "$env:JAVA_HOME" 2>&1
            if ($LASTEXITCODE -eq 0 -and (Test-Path "native-binary\moovite\moovite.exe")) {
                $jpackageSuccess = $true
                Write-Output "✅ jpackage succeeded"
            } else {
                Write-Output "jpackage failed with exit code: $LASTEXITCODE"
                Write-Output $result
            }
        } catch {
            Write-Output "jpackage failed with exception: $_"
        }
        
        if (-not $jpackageSuccess) {
            Write-Output "Using jlink alternative..."
            # Create custom runtime with jlink
            & jlink --module-path "$env:JAVA_HOME\jmods" --add-modules java.base,java.desktop,java.sql,java.net.http,java.logging,java.xml --output runtime --strip-debug --no-man-pages --no-header-files
            
            # Create app directory structure
            New-Item -ItemType Directory -Force -Path "native-binary\moovite\bin"
            New-Item -ItemType Directory -Force -Path "native-binary\moovite\lib"
            
            # Copy runtime
            Copy-Item -Recurse -Force "runtime\*" "native-binary\moovite\"
            
            # Copy JAR
            Copy-Item "target\moovite-1.0-SNAPSHOT.jar" "native-binary\moovite\lib\"
            
            # Create launcher script
            @"
        @echo off
        set DIR=%~dp0
        "%DIR%java.exe" -Djava.awt.headless=false -jar "%DIR%..\lib\moovite-1.0-SNAPSHOT.jar" %*
        "@ | Out-File -FilePath "native-binary\moovite\bin\moovite.bat" -Encoding ASCII
            Write-Output "✅ jlink alternative completed"
        }

    - name: Verify bundle structure (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        echo "Bundle created successfully"
        du -sh native-binary/moovite/
        ls -la native-binary/moovite/bin/ | head -5
        ls -la native-binary/moovite/lib/ | head -5

    - name: Verify bundle structure (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        echo "Bundle created successfully"
        Get-ChildItem -Path native-binary/moovite/ -Recurse | Measure-Object -Property Length -Sum | ForEach-Object { "Total size: $($_.Sum / 1MB) MB" }
        echo "Directory structure:"
        Get-ChildItem -Path native-binary/moovite/ -Recurse | Select-Object -First 10
        if (Test-Path "native-binary/moovite/bin/") {
          echo "Contents of bin directory:"
          Get-ChildItem -Path native-binary/moovite/bin/ -Force | Select-Object -First 5
        }
        if (Test-Path "native-binary/moovite/lib/") {
          echo "Contents of lib directory:"
          Get-ChildItem -Path native-binary/moovite/lib/ -Force | Select-Object -First 5
        }
        
    - name: Package binary (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        # Check what was actually created
        echo "Checking Linux binary structure..."
        ls -la native-binary/moovite/
        
        if [ -f "native-binary/moovite/bin/moovite" ] && [ -f "native-binary/moovite/lib/moovite-1.0-SNAPSHOT.jar" ]; then
          # jlink alternative was used - has custom structure with our launcher script
          echo "Found jlink launcher script"
          BUNDLE_SIZE=$(du -sm native-binary/moovite | cut -f1)
          if [ "$BUNDLE_SIZE" -gt 50 ]; then
            cd native-binary
            tar -czf ../${{ matrix.binary-name }}.tar.gz moovite/
            cd ..
            echo "Created: ${{ matrix.binary-name }}.tar.gz ($(ls -lh ${{ matrix.binary-name }}.tar.gz | awk '{print $5}'))"
          else
            cp native-binary/moovite/bin/moovite ${{ matrix.binary-name }}
            echo "Created: ${{ matrix.binary-name }} ($(ls -lh ${{ matrix.binary-name }} | awk '{print $5}'))"
          fi
        elif [ -f "native-binary/moovite/bin/moovite" ]; then
          # jpackage succeeded - standard jpackage structure
          echo "Found jpackage executable in bin/"
          chmod +x native-binary/moovite/bin/moovite
          BUNDLE_SIZE=$(du -sm native-binary/moovite | cut -f1)
          cd native-binary
          tar -czf ../${{ matrix.binary-name }}.tar.gz moovite/
          cd ..
          echo "Created: ${{ matrix.binary-name }}.tar.gz ($(ls -lh ${{ matrix.binary-name }}.tar.gz | awk '{print $5}'))"
        elif [ -f "native-binary/moovite/moovite" ]; then
          # jpackage succeeded and created executable in root
          echo "Found jpackage executable in root"
          chmod +x native-binary/moovite/moovite
          BUNDLE_SIZE=$(du -sm native-binary/moovite | cut -f1)
          cd native-binary
          tar -czf ../${{ matrix.binary-name }}.tar.gz moovite/
          cd ..
          echo "Created: ${{ matrix.binary-name }}.tar.gz ($(ls -lh ${{ matrix.binary-name }}.tar.gz | awk '{print $5}'))"
        else
          echo "No executable found"
          echo "Contents of native-binary/moovite/:"
          ls -la native-binary/moovite/
          echo "Contents of native-binary/moovite/bin/ (if exists):"
          ls -la native-binary/moovite/bin/ || echo "bin directory does not exist"
          exit 1
        fi
        
    - name: Package binary (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        if (Test-Path "native-binary/moovite/moovite.exe") {
            # jpackage succeeded
            $bundleSize = (Get-ChildItem "native-binary/moovite" -Recurse | Measure-Object -Property Length -Sum).Sum / 1MB
            if ($bundleSize -gt 50) {
                Compress-Archive -Path "native-binary/moovite/*" -DestinationPath "${{ matrix.binary-name }}.zip"
                $size = [math]::Round((Get-ChildItem "${{ matrix.binary-name }}.zip").Length / 1MB, 1)
                Write-Output "Created: ${{ matrix.binary-name }}.zip ($size MB)"
            } else {
                Copy-Item "native-binary/moovite/moovite.exe" "${{ matrix.binary-name }}"
                $size = [math]::Round((Get-ChildItem "${{ matrix.binary-name }}").Length / 1KB, 1)
                Write-Output "Created: ${{ matrix.binary-name }} ($size KB)"
            }
        } elseif (Test-Path "native-binary/moovite/bin/moovite.bat") {
            # jlink alternative was used
            $bundleSize = (Get-ChildItem "native-binary/moovite" -Recurse | Measure-Object -Property Length -Sum).Sum / 1MB
            Compress-Archive -Path "native-binary/moovite/*" -DestinationPath "${{ matrix.binary-name }}.zip"
            $size = [math]::Round((Get-ChildItem "${{ matrix.binary-name }}.zip").Length / 1MB, 1)
            Write-Output "Created: ${{ matrix.binary-name }}.zip ($size MB)"
        } else {
            Write-Output "No executable found"
            Write-Output "Directory contents:"
            Get-ChildItem "native-binary/moovite" -Recurse
            exit 1
        }

    - name: Upload native binary
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.binary-name }}
        path: |
          ${{ matrix.binary-name }}*

  deploy-javadoc:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Generate Javadoc
      run: mvn clean javadoc:javadoc

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: target/reports/apidocs

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  create-release:
    needs: [build, create-native-binaries]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          build-artifacts/target/*.jar
          moovite-linux/moovite-linux
          moovite-windows.exe/moovite-windows.exe
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-snapshot-release:
    needs: [build, create-native-binaries]
    if: github.ref == 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Get short SHA
      id: vars
      run: echo "short_sha=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

    - name: Delete existing snapshot release
      run: |
        gh release delete snapshot --yes || true
        git push origin :refs/tags/snapshot || true
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create/Update Snapshot Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: snapshot
        name: "Development Snapshot (${{ steps.vars.outputs.short_sha }})"
        body: |
          🚀 **Development Snapshot Build**

          This is an automatic build from the latest commit on the main branch.

          **Commit:** ${{ github.sha }}  
          **Date:** ${{ github.event.head_commit.timestamp }}

          ⚠️ **This is a development build** - use at your own risk!
        files: |
          build-artifacts/*.jar
          moovite-linux/*
          moovite-windows.exe/*
        draft: false
        prerelease: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
